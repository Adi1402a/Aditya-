#include <iostream>
#include <vector>
#include <string>
#include <numeric> // Required for std::accumulate
#include <iomanip> // Required for std::fixed and std::setprecision

// Enum to represent the type of transaction for better type safety
enum class TransactionType {
    INCOME,
    EXPENSE
};

// A structure to hold the details of a single transaction
struct Transaction {
    std::string description;
    double amount;
    TransactionType type;
};

// A class to manage all financial transactions
class MoneyManager {
private:
    // A vector to store the list of all transactions
    std::vector<Transaction> transactions;

public:
    // Adds a new transaction to the list
    void addTransaction(const std::string& desc, double amt, TransactionType type) {
        if (amt < 0) {
            std::cerr << "Warning: Transaction amount should be positive. Storing the absolute value." << std::endl;
            amt = -amt;
        }
        transactions.push_back({desc, amt, type});
        std::cout << "Transaction added: " << desc << ", $" << amt << std::endl;
    }

    // Calculates the total income
    double getTotalIncome() const {
        double total = 0.0;
        for (const auto& t : transactions) {
            if (t.type == TransactionType::INCOME) {
                total += t.amount;
            }
        }
        return total;
    }

    // Calculates the total expense
    double getTotalExpense() const {
        double total = 0.0;
        for (const auto& t : transactions) {
            if (t.type == TransactionType::EXPENSE) {
                total += t.amount;
            }
        }
        return total;
    }

    // Calculates the current balance (Income - Expense)
    double getBalance() const {
        return getTotalIncome() - getTotalExpense();
    }

    // Prints a summary of all financial data to the console
    void printSummary() const {
        std::cout << "\n--- Financial Summary ---" << std::endl;
        std::cout << std::fixed << std::setprecision(2); // Format output to 2 decimal places
        std::cout << "Total Income:  $" << getTotalIncome() << std::endl;
        std::cout << "Total Expense: $" << getTotalExpense() << std::endl;
        std::cout << "-------------------------" << std::endl;
        std::cout << "Final Balance: $" << getBalance() << std::endl;
        std::cout << "-------------------------\n" << std::endl;
    }

    // Prints all transactions
    void printTransactions() const {
        std::cout << "--- Transaction History ---" << std::endl;
        for(const auto& t : transactions) {
            std::cout << "- " << t.description << ": $" << t.amount 
                      << " (" << (t.type == TransactionType::INCOME ? "Income" : "Expense") << ")" << std::endl;
        }
        std::cout << "---------------------------\n" << std::endl;
    }
};

// Main function to demonstrate the MoneyManager class
int main() {
    // Create an instance of the MoneyManager
    MoneyManager manager;

    // Add some sample transactions
    manager.addTransaction("Paycheck", 3000.00, TransactionType::INCOME);
    manager.addTransaction("Groceries", 150.75, TransactionType::EXPENSE);
    manager.addTransaction("Freelance Work", 500.00, TransactionType::INCOME);
    manager.addTransaction("Rent", 1200.00, TransactionType::EXPENSE);
    manager.addTransaction("Internet Bill", 60.00, TransactionType::EXPENSE);

    // Print the list of all transactions
    manager.printTransactions();

    // Print the final financial summary
    manager.printSummary();

    return 0;
}